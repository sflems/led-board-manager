# Generated by Django 3.1.3 on 2021-01-25 05:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='Default', max_length=32, verbose_name='Config Name')),
                ('configJSON', models.JSONField(default={'boards': {'clock': {'clock_rgb': '', 'date_rgb': '', 'duration': 15, 'flash_seconds': True, 'hide_indicator': False, 'preferred_team_colors': True}, 'covid19': {'canada_enabled': False, 'canada_prov': ['Quebec'], 'country': ['USA'], 'country_enabled': False, 'us_state': ['New York'], 'us_state_enabled': False, 'worldwide_enabled': False}, 'scoreticker': {'preferred_teams_only': False, 'rotation_rate': 5}, 'seriesticker': {'preferred_teams_only': True, 'rotation_rate': 5}, 'standings': {'conference': 'eastern', 'divisions': 'central', 'preferred_standings_only': True, 'standing_type': 'wild_card'}, 'weather': {'data_feed': 'EC', 'duration': 60, 'enabled': False, 'forecast_days': 3, 'forecast_enabled': True, 'forecast_update': 1, 'owm_apikey': '', 'show_on_clock': True, 'units': 'metric', 'update_freq': 5, 'view': 'full'}, 'wxalert': {'alert_duration': 5, 'alert_feed': 'EC', 'alert_title': True, 'nws_show_expire': False, 'scroll_alert': True, 'show_alerts': True, 'show_on_clock': True, 'update_freq': 5}}, 'debug': False, 'live_mode': False, 'loglevel': 'INFO', 'preferences': {'end_of_day': '8:00', 'goal_animations': {'pref_team_only': True}, 'live_game_refresh_rate': 10, 'location': '', 'sog_display_frequency': 4, 'teams': ['Canadiens'], 'time_format': '12h'}, 'sbio': {'dimmer': {'daytime': '', 'enabled': False, 'frequency': 5, 'light_level_lux': 400, 'mode': 'always', 'nighttime': '', 'offset': 90, 'source': 'software', 'sunrise_brightness': 40, 'sunset_brightness': 5}, 'pushbutton': {'bonnet': False, 'display_halt': True, 'display_reboot': True, 'enabled': False, 'pin': 25, 'poweroff_duration': 10, 'poweroff_override_process': '', 'reboot_duration': 2, 'reboot_override_process': '', 'state_triggered1': 'weather', 'state_triggered1_process': ''}, 'screensaver': {'animations': True, 'data_updates': False, 'delay': 30, 'enabled': True, 'motionsensor': True, 'pin': 24, 'start': '22:00', 'stop': '22:05'}}, 'states': {'intermission': ['scoreticker', 'team_summary'], 'off_day': ['scoreticker', 'team_summary', 'standings', 'clock'], 'post_game': ['team_summary', 'standings', 'scoreticker', 'clock'], 'scheduled': ['team_summary', 'standings', 'scoreticker', 'clock']}})),
                ('isActive', models.BooleanField(default=1, verbose_name='Active')),
                ('debug', models.BooleanField(default=False)),
                ('loglevel', models.CharField(default='INFO', max_length=16)),
                ('live_mode', models.BooleanField(default=False)),
                ('preferences', models.JSONField(default={'end_of_day': '8:00', 'goal_animations': {'pref_team_only': True}, 'live_game_refresh_rate': 10, 'location': '', 'sog_display_frequency': 4, 'teams': ['Canadiens'], 'time_format': '12h'})),
                ('states', models.JSONField(default={'intermission': ['scoreticker', 'team_summary'], 'off_day': ['scoreticker', 'team_summary', 'standings', 'clock'], 'post_game': ['team_summary', 'standings', 'scoreticker', 'clock'], 'scheduled': ['team_summary', 'standings', 'scoreticker', 'clock']})),
                ('boards', models.JSONField(default={'clock': {'clock_rgb': '', 'date_rgb': '', 'duration': 15, 'flash_seconds': True, 'hide_indicator': False, 'preferred_team_colors': True}, 'covid19': {'canada_enabled': False, 'canada_prov': ['Quebec'], 'country': ['USA'], 'country_enabled': False, 'us_state': ['New York'], 'us_state_enabled': False, 'worldwide_enabled': False}, 'scoreticker': {'preferred_teams_only': False, 'rotation_rate': 5}, 'seriesticker': {'preferred_teams_only': True, 'rotation_rate': 5}, 'standings': {'conference': 'eastern', 'divisions': 'central', 'preferred_standings_only': True, 'standing_type': 'wild_card'}, 'weather': {'data_feed': 'EC', 'duration': 60, 'enabled': False, 'forecast_days': 3, 'forecast_enabled': True, 'forecast_update': 1, 'owm_apikey': '', 'show_on_clock': True, 'units': 'metric', 'update_freq': 5, 'view': 'full'}, 'wxalert': {'alert_duration': 5, 'alert_feed': 'EC', 'alert_title': True, 'nws_show_expire': False, 'scroll_alert': True, 'show_alerts': True, 'show_on_clock': True, 'update_freq': 5}})),
                ('sbio', models.JSONField(default={'dimmer': {'daytime': '', 'enabled': False, 'frequency': 5, 'light_level_lux': 400, 'mode': 'always', 'nighttime': '', 'offset': 90, 'source': 'software', 'sunrise_brightness': 40, 'sunset_brightness': 5}, 'pushbutton': {'bonnet': False, 'display_halt': True, 'display_reboot': True, 'enabled': False, 'pin': 25, 'poweroff_duration': 10, 'poweroff_override_process': '', 'reboot_duration': 2, 'reboot_override_process': '', 'state_triggered1': 'weather', 'state_triggered1_process': ''}, 'screensaver': {'animations': True, 'data_updates': False, 'delay': 30, 'enabled': True, 'motionsensor': True, 'pin': 24, 'start': '22:00', 'stop': '22:05'}})),
            ],
            options={
                'verbose_name': 'Settings',
                'verbose_name_plural': 'Settings',
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('abbreviation', models.CharField(max_length=3, null=True, unique=True)),
                ('teamName', models.CharField(max_length=32, null=True)),
                ('locationName', models.CharField(max_length=32, null=True)),
                ('jsonLink', models.URLField(null=True)),
                ('officialSiteUrl', models.URLField(null=True)),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
